dnl #  ########################################################################
AC_INIT(Makefile.am)
echo "Configure launch with the following arguments: $*"
dnl #  ########################################################################

AM_INIT_AUTOMAKE(UltraStar-ng,[0.1.1-dev])
AC_PREFIX_DEFAULT(/usr/local)

AC_CONFIG_HEADERS([config.h:config.h.in:config.h.incl],,[[
	echo > config.h.incl
	echo >> config.h.incl "/* Ultrastar computed includes */"
	echo >> config.h.incl "$ac_includes_default"
]])

dnl ###########################################################################
dnl #### generate config.h  for C++   sources

CFLAGS="-W -Wall $CFLAGS"
CXXFLAGS="-W -Wall $CXXFLAGS"

# standard programs
AC_PROG_CC
AC_PROG_CXX
AC_PROG_RANLIB
AC_PROG_INSTALL

THEMES_DIR="${datadir}/ultrastar-ng/themes/"
AC_SUBST(THEMES_DIR)

IMAGES_DIR="${datadir}/ultrastar-ng/images/"
AC_SUBST(IMAGES_DIR)

# Processing configure input configuration flags
AC_ARG_WITH(audio,
	AC_HELP_STRING(--with-audio[={xine|gstreamer}],
		implementation of the audio layer (default: autodetect)),
	[audio_layer="$withval"],
	[audio_layer="autodetect"]
)
if test $audio_layer = yes ; then audio_layer="autodetect" ; fi

AC_ARG_WITH(svg,
	AC_HELP_STRING(--with-svg[={cairo|librsvg}],
		implementation of the svg rendering layer (default: librsvg)),
	[svg_layer="$withval"],
	[svg_layer="librsvg"]
)
if test $svg_layer = yes ; then svg_layer="librsvg" ; fi

AC_ARG_WITH(video,
	 AC_HELP_STRING(--with-video[={smpeg|disable}],
	 	implementation of the video rendering layer (default: autodetect)),
	[video_layer="$withval"],
	[video_layer="autodetect"]
)
if test $video_layer = yes ; then video_layer="autodetect" ; fi

# Check for the standard headers
AC_HEADER_STDC
AC_HEADER_DIRENT

AC_LANG_SAVE
	AC_LANG_CPLUSPLUS
	AC_CHECK_HEADERS([algorithm vector iostream],
		have_stdpp_headers=yes, 
		AC_MSG_ERROR([You need to have the libstdc++ headers installed]))
AC_LANG_RESTORE

AC_CHECK_HEADERS([fcntl.h math.h stdlib.h stdio.h getopt.h dirent.h sys/ioctl.h sys/types.h sys/stat.h ],
	have_std_headers=yes,
	AC_MSG_ERROR(You need to have the standard c headers installed) )

PKG_CHECK_MODULES(cairo, cairo >= 1.2 , ,
	AC_MSG_ERROR(This game connot be build without cairo >= 1.2 ))

PKG_CHECK_MODULES(libxml, libxml-2.0 , ,
	AC_MSG_ERROR(This game connot be build without libxml-2))

PKG_CHECK_MODULES(fftw3f, fftw3f , ,
	AC_MSG_ERROR(This game connot be build without fftw3f))

PKG_CHECK_MODULES(alsa, alsa , ,
	AC_MSG_ERROR(This game connot be build without alsa))

PKG_CHECK_MODULES(librsvg, librsvg-2.0 , [librsvg_detected=yes] , [librsvg_detected=no])
PKG_CHECK_MODULES(cairosvg, cairo-svg , [cairosvg_detected=yes] , [cairosvg_detected=no])
PKG_CHECK_MODULES(xine, libxine , [xine_detected=yes] , [xine_detected=no])
PKG_CHECK_MODULES(gstreamer, gstreamer-0.10 , [gst_detected=yes] , [gst_detected=no])

AC_CHECK_PROGS(SDLCONFIG, sdl-config, AC_MSG_ERROR(Cannot find sdl-config))
AC_CHECK_LIB(SDL_image, IMG_LoadPNG_RW,,AC_MSG_ERROR(Cannot find SDL_image))
AC_CHECK_LIB(SDL_gfx, zoomSurface,,AC_MSG_ERROR(Cannot find SDL_gfx))
AC_CHECK_LIB(smpeg,SMPEG_new,[video_detected="yes"],[video_detected="no"])

dnl ###########################################################################
dnl #### processing things

# standard headers are installed, we include them in the config.h file

ac_includes_default=$(cat <<USNG_EOF
$ac_includes_default
/* libstd++ headers */
#include <algorithm>
#include <string>
#include <vector>
#include <iostream>
/* libc headers */
#include <getopt.h>
#include <fcntl.h>
#include <math.h>
#include <stdlib.h>
#include <stdio.h>
#include <dirent.h>
#include <sys/ioctl.h>
#include <sys/types.h>
#include <sys/stat.h>
USNG_EOF)

# Do things for cairo
CAIRO_FLAGS=`pkg-config --cflags cairo`
CAIRO_LIBS=`pkg-config --libs cairo`
ac_includes_default=$(cat <<USNG_EOF
$ac_includes_default
/* cairo headers */
#include <cairo.h>
USNG_EOF)
AC_SUBST(CAIRO_FLAGS)
AC_SUBST(CAIRO_LIBS)

# Do things for libxml
XML_FLAGS=`xml2-config --cflags`
XML_LIBS=`xml2-config --libs`
ac_includes_default=$(cat <<USNG_EOF
$ac_includes_default
/* libxml2 headers */
#include <libxml/parser.h>
#include <libxml/tree.h>
USNG_EOF)
AC_SUBST(XML_FLAGS)
AC_SUBST(XML_LIBS)

# Do things for libsdl
SDL_FLAGS=`$SDLCONFIG --cflags`
SDL_LIBS=`$SDLCONFIG --libs`
ac_includes_default=$(cat <<USNG_EOF
$ac_includes_default
/* libsdl headers */
#include <SDL/SDL.h>
#include <SDL/SDL_thread.h>
/* other SDL headers */
#include <SDL/SDL_image.h>
#include <SDL/SDL_gfxPrimitives.h>
#include <SDL/SDL_rotozoom.h>    
USNG_EOF)
AC_SUBST(SDL_FLAGS)
AC_SUBST(SDL_LIBS)

# Do things for fftw3f
FFT_FLAGS=`pkg-config --cflags fftw3f`
FFT_LIBS=`pkg-config --libs fftw3f`
ac_includes_default=$(cat <<USNG_EOF
$ac_includes_default
/* libsdl headers */
#include <fftw3.h>
USNG_EOF)
AC_SUBST(FFT_FLAGS)
AC_SUBST(FFT_LIBS)

# Do things for alsa
ALSA_FLAGS=`pkg-config --cflags alsa`
ALSA_LIBS=`pkg-config --libs alsa`
ac_includes_default=$(cat <<USNG_EOF
$ac_includes_default
/* alsa headers */
#include <alsa/asoundlib.h>
USNG_EOF)
AC_SUBST(ALSA_FLAGS)
AC_SUBST(ALSA_LIBS)

# Do things for video
if test $video_detected = yes ; then
	case $video_layer in
		smpeg*|autodetect*) 
			video_layer="smpeg"
			VIDEO_FLAGS=""
			VIDEO_LIBS="-lsmpeg"
			ac_includes_default=$(cat <<-USNG_EOF
			$ac_includes_default
			/* video headers */
			#define USE_SMPEG 1
			#include <smpeg/smpeg.h>
			USNG_EOF)
			;;
		*) ;;
	esac
else
	case $video_layer in
		smpeg*) AC_MSG_ERROR(Cannot find smpeg but was explicitly enable) ;;
		*) video_layer="disable" ;;
	esac
fi
AC_SUBST(VIDEO_FLAGS)
AC_SUBST(VIDEO_LIBS)

# Do things for audio
case $audio_layer in
	xine*)
		if test $xine_detected = yes ; then
			audio_layer="xine"
		else
			audio_layer="no"
		fi
		;;	
	gstreamer*)
		if test $gst_detected = yes ; then
			audio_layer="gstreamer"
		else
			audio_layer="no"
		fi
		;;
	autodetect*)
		if test $xine_detected = yes ; then
			audio_layer="xine"
		else if test $gst_detected = yes ; then
			audio_layer="gstreamer"
		else
			audio_layer="no"
		fi ; fi
		;;
esac

case $audio_layer in
	xine*)
		AUDIO_FLAGS=`xine-config --cflags`
		AUDIO_LIBS=`xine-config --libs`
		ac_includes_default=$(cat <<-USNG_EOF
		$ac_includes_default
		/* video headers */
		#define USE_LIBXINE 1
		#include <xine.h>
		USNG_EOF)
		;;
	gstreamer*)
		AUDIO_FLAGS=`pkg-config --cflags gstreamer-0.10`
		AUDIO_LIBS=`pkg-config --libs gstreamer-0.10`
		ac_includes_default=$(cat <<-USNG_EOF
		$ac_includes_default
		/* video headers */
		#define USE_GSTREAMER 1
		#include <gst/gst.h>
		USNG_EOF)
		;;
	no*)
		AC_MSG_ERROR("I'm sure you wish audio in this game please install eather xine or gstreamer")
		;;
esac

AC_SUBST(AUDIO_FLAGS)
AC_SUBST(AUDIO_LIBS)

# Do things for svg
case $svg_layer in
	librsvg*)
		if test $librsvg_detected = yes ; then
			svg_layer="librsvg"
		else
			svg_layer="no"
		fi
		;;
	cairo*)
		if test $cairosvg_detected = yes ; then
			svg_layer="cairo"
		else
			svg_layer="no"
		fi
		;;
	autodetect*)
		if test $librsvg_detected = yes ; then
			svg_layer="librsvg"
		else if test $cairosvg_detected = yes ; then
			svg_layer="cairo"
		else
			svg_layer="no"
		fi ; fi
		;;
esac

case $svg_layer in
	librsvg*)
		SVG_FLAGS=`pkg-config --cflags librsvg-2.0`
		SVG_LIBS=`pkg-config --libs librsvg-2.0`
		ac_includes_default=$(cat <<-USNG_EOF
		$ac_includes_default
		/* svg headers */
		#define USE_LIBRSVG 1
		#include <librsvg/rsvg.h>
		#include <librsvg/rsvg-cairo.h>
		USNG_EOF)
		;;
	cairo*)
		SVG_FLAGS=`pkg-config --cflags libsvg-cairo`
		SVG_LIBS=`pkg-config --libs libsvg-cairo`
		ac_includes_default=$(cat <<-USNG_EOF
		$ac_includes_default
		/* svg headers */
		#define USE_LIBSVG_CAIRO 1
		#include <svg.h>
		#include <svg-cairo.h>
		USNG_EOF)
		;;
	no*)
		AC_MSG_ERROR("Ultrstar-ng doesn't support non svg rendering please install eather cairo-svg or librsvg")
		;;
esac

AC_SUBST(SVG_FLAGS)
AC_SUBST(SVG_LIBS)

dnl ###########################################################################
dnl #### generation of the outputs

AC_OUTPUT(
	Makefile
	src/Makefile
)

echo ""
echo "Ultrastar-ng is now configured to your system with the following"
echo "user-defined options."
echo ""
echo "Option | Flag         | Chosen implementation "
echo "----------------------------------------------"
echo "audio  | --with-audio | $audio_layer          "
echo "video  | --with-video | $video_layer          "
echo "svg    | --with-svg   | $svg_layer            "
echo ""
