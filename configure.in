dnl #  ########################################################################
AC_INIT(Makefile.am)
echo "Configure launch with the following arguments: $*"
dnl #  ########################################################################

AM_INIT_AUTOMAKE(UltraStar-ng,[0.2.1])
AC_PREFIX_DEFAULT(/usr/local)

AC_CONFIG_HEADERS([config.h:config.h.in:config.h.incl],,[[
	echo > config.h.incl
	echo >> config.h.incl "/* Ultrastar computed includes */"
	echo >> config.h.incl "$ac_includes_default"
]])

dnl ###########################################################################
dnl #### generate config.h  for C++   sources

CFLAGS="-W -Wall $CFLAGS"
CXXFLAGS="-W -Wall $CXXFLAGS"

# standard programs
AC_PROG_CXX
AC_PROG_INSTALL
AC_PROG_LIBTOOL

THEMES_DIR="${datadir}/ultrastar-ng/themes/"
AC_SUBST(THEMES_DIR)

DATA_DIR="${datadir}/ultrastar-ng/"
AC_SUBST(DATA_DIR)

# Processing configure input configuration flags
	
AC_ARG_ENABLE(debug,
	AC_HELP_STRING(--enable-debug,
		Enable debugging support [[[default=no]]]),
	[case "${enableval}" in
		yes) debug="yes" ;;
		no)  debug="no" ;;
		*) AC_MSG_ERROR(bad value ${enableval} for --enable-debug) ;;
 	esac],
	debug="no")
if test $debug = yes ; then CFLAGS="-g -O0 $CFLAGS" ; CXXFLAGS="-g -O0 $CXXFLAGS" ; fi

AC_ARG_WITH(audio,
	AC_HELP_STRING(--with-audio[={xine|gstreamer}],
		 implementation of the audio layer [[[default=autodetect]]]),
	[audio_layer="$withval"],
	[audio_layer="autodetect"]
)
if test $audio_layer = yes ; then audio_layer="autodetect" ; fi

AC_ARG_WITH(video,
	 AC_HELP_STRING(--with-video[={ffmpeg|disable}],
	 	implementation of the video rendering layer [[[default=autodetect]]]),
	[video_layer="$withval"],
	[video_layer="autodetect"]
)
if test $video_layer = yes ; then video_layer="autodetect" ; fi

AC_ARG_ENABLE(record-alsa,
	AC_HELP_STRING(--enable-record-alsa,
		Enable alsa record backend [[[default=autodetect]]]),
	[case "${enableval}" in
		yes) enable_record_alsa="yes" ;;
		no)  enable_record_alsa="no" ;;
		*) AC_MSG_ERROR(bad value ${enableval} for --enable-record-alsa) ;;
 	esac],
	enable_record_alsa="autodetect")
AC_ARG_ENABLE(record-pa18,
	AC_HELP_STRING(--enable-record-pa18,
		Enable PortAudioV18 record backend [[[default=autodetect]]]),
	[case "${enableval}" in
		yes) enable_record_pa18="yes" ;;
		no)  enable_record_pa18="no" ;;
		*) AC_MSG_ERROR(bad value ${enableval} for --enable-record-pa18) ;;
 	esac],
	enable_record_pa18="autodetect")
AC_ARG_ENABLE(record-pa19,
	AC_HELP_STRING(--enable-record-pa19,
		Enable PortAudioV19 record backend [[[default=autodetect]]]),
	[case "${enableval}" in
		yes) enable_record_pa19="yes" ;;
		no)  enable_record_pa19="no" ;;
		*) AC_MSG_ERROR(bad value ${enableval} for --enable-record-pa19) ;;
 	esac],
	enable_record_pa19="autodetect")
AC_ARG_ENABLE(record-portaudio,
	AC_HELP_STRING(--enable-record-portaudio,
		Enable at least one PortAudio record backend (override pa18 and pa19) [[[default=autodetect]]]),
	[case "${enableval}" in
		yes) enable_record_pa="yes" ;;
		no)  enable_record_pa="no" ;;
		*) AC_MSG_ERROR(bad value ${enableval} for --enable-record-portaudio) ;;
 	esac],
	enable_record_pa="autodetect")

if test enable_record_pa = no ; then
	enable_record_pa18="no"
	enable_record_pa19="no"
fi
if test enable_record_pa = yes ; then
	enable_record_pa18="autodetect"
	enable_record_pa19="autodetect"
fi

AC_ARG_ENABLE(record-gst,
	AC_HELP_STRING(--enable-record-gst,
		Enable GStreamer record backend [[[default=autodetect]]]),
	[case "${enableval}" in
		yes) enable_record_gst="yes" ;;
		no)  enable_record_gst="no" ;;
		*) AC_MSG_ERROR(bad value ${enableval} for --enable-record-gst) ;;
 	esac],
	enable_record_gst="autodetect")

# Check for the standard headers
AC_HEADER_STDC
AC_HEADER_DIRENT

AC_LANG_SAVE
	AC_LANG_CPLUSPLUS
	AC_CHECK_HEADERS([algorithm],
		have_stdpp_headers=yes, 
		AC_MSG_ERROR([You need to have the libstdc++ headers installed]))
	AC_CHECK_HEADERS([boost/thread.hpp boost/scoped_ptr.hpp boost/thread/condition.hpp boost/thread/mutex.hpp boost/thread/thread.hpp boost/ptr_container/ptr_map.hpp boost/noncopyable.hpp boost/progress.hpp boost/ptr_container/ptr_set.hpp boost/thread/xtime.hpp boost/program_options.hpp boost/lexical_cast.hpp boost/regex.hpp boost/function.hpp boost/scoped_ptr.hpp boost/lambda/lambda.hpp boost/lambda/bind.hpp boost/spirit/core.hpp boost/thread/xtime.hpp],, 
		AC_MSG_ERROR([You need to have the boost headers installed]))
AC_LANG_RESTORE

AC_CHECK_HEADERS([fcntl.h glob.h dirent.h sys/ioctl.h sys/types.h sys/stat.h ],
	have_std_headers=yes,
	AC_MSG_ERROR(You need to have the standard c headers installed) )

PKG_CHECK_MODULES(cairo, cairo >= 1.2 , ,
	AC_MSG_ERROR(This game cannot be built without cairo >= 1.2 ))

PKG_CHECK_MODULES(libxml, libxml-2.0 , ,
	AC_MSG_ERROR(This game cannot be built without libxml-2))

PKG_CHECK_MODULES(pangocairo, pangocairo , ,
	AC_MSG_ERROR(This game cannot be built without pango for cairo))

PKG_CHECK_MODULES([ImageMagick], [ImageMagick++] , ,
	AC_MSG_ERROR(This game cannot be built without imagemagick))

PKG_CHECK_MODULES(librsvg, librsvg-2.0 , , 
	AC_MSG_ERROR(This game cannot be built without librsvg))

PKG_CHECK_MODULES(xine, libxine , [xine_detected="yes"] , [xine_detected="no"])
PKG_CHECK_MODULES(gstreamer_0_10, gstreamer-0.10, [gst_detected="yes"] , [gst_detected="no"])
PKG_CHECK_MODULES(gstreamer_0_10_7, gstreamer-0.10 >= 0.10.7 , [gst_detected_seek_simple="yes"] , [gst_detected_seek_simple="no"])
AC_CHECK_PROGS(SDLCONFIG, sdl-config, AC_MSG_ERROR(Cannot find sdl-config))

# Record backend detection
PKG_CHECK_MODULES(alsa, alsa , [record_alsa="yes"] , [record_alsa="no"])
PKG_CHECK_MODULES(portAudioV19, portaudio-2.0 , [record_pa19="yes"] , [record_pa19="no"])

PKG_CHECK_MODULES(ffmpeg, libavutil libavformat libavcodec libswscale, [ffmpeg_detected="yes"],[ffmpeg_detected="no"])

AC_CHECK_HEADERS([ffmpeg/avcodec.h ffmpeg/avformat.h ffmpeg/swscale.h], have_old_ffmpeg_headers=yes, have_old_ffmpeg_headers=no)
AC_CHECK_HEADERS([libavcodec/avcodec.h libavformat/avformat libswscale/swscale.h], have_new_ffmpeg_headers=yes, have_new_ffmpeg_headers=no)

saved_LIBS=$LIBS
# Only detect pa18 if pa19 is not found (pa19 is detected as pa18 else)
if test $record_pa19 = no ; then
	AC_CHECK_LIB(portaudio, Pa_Initialize, [record_pa18="yes"] , [record_pa18="no"])
else
	record_pa18="no"
fi
AC_CHECK_LIB(SDL_image, IMG_LoadPNG_RW,[sdl_image="yes"],[sdl_image="no"])
LIBS=$saved_LIBS

dnl ###########################################################################
dnl #### processing things

# standard headers are installed, we include them in the config.h file

# Do things for cairo
CAIRO_FLAGS=`pkg-config --cflags cairo`
CAIRO_LIBS=`pkg-config --libs cairo`
ac_includes_default=$(cat <<USNG_EOF
$ac_includes_default
/* cairo headers */
#include <cairo.h>
USNG_EOF)
AC_SUBST(CAIRO_FLAGS)
AC_SUBST(CAIRO_LIBS)

#Do things for Magick++
MAGICKPP_FLAGS=`pkg-config --cflags ImageMagick++`
MAGICKPP_LIBS=`pkg-config --libs ImageMagick++`
ac_includes_default=$(cat <<USNG_EOF
$ac_includes_default
/* Magick++ headers */
#include <Magick++.h>
USNG_EOF)
AC_SUBST(MAGICKPP_FLAGS)
AC_SUBST(MAGICKPP_LIBS)

# Do things for libxml
XML_FLAGS=`xml2-config --cflags`
XML_LIBS=`xml2-config --libs`
ac_includes_default=$(cat <<USNG_EOF
$ac_includes_default
/* libxml2 headers */
#include <libxml/parser.h>
#include <libxml/tree.h>
USNG_EOF)
AC_SUBST(XML_FLAGS)
AC_SUBST(XML_LIBS)

# Do things for libsdl
SDL_FLAGS=`$SDLCONFIG --cflags`
SDL_LIBS=`$SDLCONFIG --libs`
ac_includes_default=$(cat <<USNG_EOF
$ac_includes_default
/* libsdl headers */
#include <SDL/SDL.h>
#include <SDL/SDL_thread.h>
USNG_EOF)
if test $sdl_image = yes ; then
	ac_includes_default=$(cat <<-USNG_EOF
	$ac_includes_default
	/* other SDL headers */
	#include <SDL/SDL_image.h>
	#include <SDL/SDL_rotozoom.h>    
	USNG_EOF)
	SDL_LIBS="$SDL_LIBS -lSDL_image"
fi
AC_SUBST(SDL_FLAGS)
AC_SUBST(SDL_LIBS)

# Do things for pangocairo
PANGOCAIRO_FLAGS=`pkg-config --cflags pangocairo`
PANGOCAIRO_LIBS=`pkg-config --libs pangocairo`
ac_includes_default=$(cat <<USNG_EOF
$ac_includes_default
/* pango cairo headers */
#include <pango/pangocairo.h>
USNG_EOF)
AC_SUBST(PANGOCAIRO_FLAGS)
AC_SUBST(PANGOCAIRO_LIBS)

# Do things for librsvg
SVG_FLAGS=`pkg-config --cflags librsvg-2.0`
SVG_LIBS=`pkg-config --libs librsvg-2.0`
ac_includes_default=$(cat <<-USNG_EOF
$ac_includes_default
/* svg headers */
#include <librsvg/rsvg.h>
#include <librsvg/rsvg-cairo.h>
USNG_EOF)
AC_SUBST(SVG_FLAGS)
AC_SUBST(SVG_LIBS)

# Configure alsa record backend
if test $record_alsa = yes ; then
	if test $enable_record_alsa = no ; then
		RECORD_ALSA_FLAGS=""
		RECORD_ALSA_LIBS=""
		RECORD_ALSA=false
	else
		RECORD_ALSA_FLAGS=`pkg-config --cflags alsa`
		RECORD_ALSA_LIBS=`pkg-config --libs alsa`
		RECORD_ALSA=true
	fi
else
	if test $enable_record_alsa = yes ; then
		AC_MSG_ERROR(Cannot find alsa, but explicitly required)
	fi
	RECORD_ALSA_FLAGS=""
	RECORD_ALSA_LIBS=""
	RECORD_ALSA=false
fi
AM_CONDITIONAL(RECORD_ALSA, ${RECORD_ALSA})
AC_SUBST(RECORD_ALSA_FLAGS)
AC_SUBST(RECORD_ALSA_LIBS)

# Configure portaudio record backend
if test $record_pa18 = no -a $record_pa19 = no -a $enable_record_pa = yes ; then
	AC_MSG_ERROR(Cannot find PortAudio (V18 or V19), but explicitly required)
fi
if test $record_pa18 = yes ; then
	if test $enable_record_pa18 = no ; then
		RECORD_PA18_FLAGS=""
		RECORD_PA18_LIBS=""
		RECORD_PA18=false
	else
		RECORD_PA18_FLAGS=""
		RECORD_PA18_LIBS="-lportaudio"
		RECORD_PA18=true
	fi
else
	if test $enable_record_pa18 = yes ; then
		AC_MSG_ERROR(Cannot find PortAudioV18, but explicitly required)
	fi
	RECORD_PA18_FLAGS=""
	RECORD_PA18_LIBS=""
	RECORD_PA18=false
fi
AM_CONDITIONAL(RECORD_PA18, ${RECORD_PA18})
AC_SUBST(RECORD_PA18_FLAGS)
AC_SUBST(RECORD_PA18_LIBS)
if test $record_pa19 = yes ; then
	if test $enable_record_pa19 = no ; then
		RECORD_PA19_FLAGS=""
		RECORD_PA19_LIBS=""
		RECORD_PA19=false
	else
		RECORD_PA19_FLAGS=`pkg-config --cflags portaudio-2.0`
		RECORD_PA19_LIBS=`pkg-config --libs portaudio-2.0`
		RECORD_PA19=true
	fi
else
	if test $enable_record_pa19 = yes ; then
		AC_MSG_ERROR(Cannot find PortAudioV19, but explicitly required)
	fi
	RECORD_PA19_FLAGS=""
	RECORD_PA19_LIBS=""
	RECORD_PA19=false
fi
AM_CONDITIONAL(RECORD_PA19, ${RECORD_PA19})
AC_SUBST(RECORD_PA19_FLAGS)
AC_SUBST(RECORD_PA19_LIBS)


# Configure gstreamer record backend
if test $gst_detected = yes ; then
	if test $enable_record_gst = no ; then
		RECORD_GST_FLAGS=""
		RECORD_GST_LIBS=""
		RECORD_GST=false
	else
		RECORD_GST_FLAGS=`pkg-config --cflags gstreamer-0.10`
		RECORD_GST_LIBS=`pkg-config --libs gstreamer-0.10`
		RECORD_GST=true
	fi
else
	if test $enable_record_gst = yes ; then
		AC_MSG_ERROR(Cannot find GStreamer, but explicitly required)
	fi
	RECORD_GST_FLAGS=""
	RECORD_GST_LIBS=""
	RECORD_GST=false
fi
AM_CONDITIONAL(RECORD_GST, ${RECORD_GST})
AC_SUBST(RECORD_GST_FLAGS)
AC_SUBST(RECORD_GST_LIBS)

# Do things for video
case $video_layer in
	ffmpeg*)
		if test $ffmpeg_detected = yes ; then
			video_layer="ffmpeg"
		else
			AC_MSG_ERROR(Cannot find ffmpeg, but explicitly required)
		fi
		;;
	autodetect*)
		if test $ffmpeg_detected = yes ; then
			video_layer="ffmpeg"
		else
			video_layer="no"
		fi
		;;
esac
case $video_layer in
	ffmpeg*)
		VIDEO_FLAGS=`pkg-config --cflags libavutil libavformat libavcodec libswscale`
		VIDEO_LIBS=`pkg-config --libs libavutil libavformat libavcodec libswscale`
		ac_includes_default=$(cat <<-USNG_EOF
		$ac_includes_default
		/* video headers */
		#define USE_FFMPEG_VIDEO 1
		USNG_EOF)
		if test $have_new_ffmpeg_headers = yes ; then
			ac_includes_default=$(cat <<-USNG_EOF
			$ac_includes_default
			#define USE_NEW_FFMPEG_VIDEO 1
			USNG_EOF)
		else
			if test $have_old_ffmpeg_headers = yes ; then
				ac_includes_default=$(cat <<-USNG_EOF
				$ac_includes_default
				#define USE_OLD_FFMPEG_VIDEO 1
				USNG_EOF)
			else
				AC_MSG_ERROR(configure found ffmpeg libraries but not the headers)
			fi
		fi
		;;
	no*)
		;;
esac
AC_SUBST(VIDEO_FLAGS)
AC_SUBST(VIDEO_LIBS)

# Do things for audio
case $audio_layer in
	xine*)
		if test $xine_detected = yes ; then
			audio_layer="xine"
		else
			audio_layer="no"
		fi
		;;	
	gstreamer*)
		if test $gst_detected = yes ; then
			audio_layer="gstreamer"
		else
			audio_layer="no"
		fi
		;;
	autodetect*)
		if test $xine_detected = yes ; then
			audio_layer="xine"
		else if test $gst_detected = yes ; then
			audio_layer="gstreamer"
		else
			audio_layer="no"
		fi ; fi
		;;
esac

case $audio_layer in
	xine*)
		AUDIO_FLAGS=`xine-config --cflags`
		AUDIO_LIBS=`xine-config --libs`
		ac_includes_default=$(cat <<-USNG_EOF
		$ac_includes_default
		/* video headers */
		#define USE_LIBXINE_AUDIO 1
		#include <xine.h>
		USNG_EOF)
		;;
	gstreamer*)
		AUDIO_FLAGS=`pkg-config --cflags gstreamer-0.10`
		AUDIO_LIBS=`pkg-config --libs gstreamer-0.10`
		ac_includes_default=$(cat <<-USNG_EOF
		$ac_includes_default
		/* video headers */
		#define USE_GSTREAMER_AUDIO 1
		#include <gst/gst.h>
		USNG_EOF)
		if test $gst_detected_seek_simple = yes ; then
			ac_includes_default=$(cat <<-USNG_EOF
			$ac_includes_default
			#define GSTREAMER_HAS_SEEK_SIMPLE 1
			USNG_EOF)
		fi
		;;
	no*)
		AC_MSG_ERROR("I'm sure you wish audio in this game please install eather xine or gstreamer")
		;;
esac

AC_SUBST(AUDIO_FLAGS)
AC_SUBST(AUDIO_LIBS)

GL_LIBS="-lGL -lGLU"
ac_includes_default=$(cat <<-USNG_EOF
$ac_includes_default
#include <SDL/SDL_opengl.h>
USNG_EOF)

AC_SUBST(GL_LIBS)

dnl ###########################################################################
dnl #### generation of the outputs

AC_OUTPUT(
	Makefile
	audio/Makefile
	data/Makefile
	docs/Makefile
	src/Makefile
	themes/Makefile
)

echo "                                                                    "
echo "Ultrastar-ng is now configured to your system with the following    "
echo "user-defined options.                                               "
echo "                                                                    "
echo "Option           | Flag                     | Chosen implementation "
echo "--------------------------------------------------------------------"
echo "debug            | --{enable,disable}-debug | $debug                "
echo "audio            | --with-audio             | $audio_layer          "
echo "video            | --with-video             | $video_layer          "
echo "record           | --with-record-{}         | none                  "
echo "                 |                          | ~tone                 "
if test ${RECORD_ALSA} = true ; then
	echo "                 |                          | alsa                  "
fi
if test ${RECORD_PA18} = true ; then
	echo "                 |                          | portaudio V18         "
fi
if test ${RECORD_PA19} = true ; then
	echo "                 |                          | portaudio V19         "
fi
if test ${RECORD_GST} = true ; then
	echo "                 |                          | gstreamer             "
fi
echo "                                                                    "
