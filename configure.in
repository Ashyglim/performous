dnl #  ########################################################################
AC_INIT(Makefile.am)
echo "Configure launch with the following arguments: $*"
dnl #  ########################################################################

AM_INIT_AUTOMAKE(UltraStar-ng,[0.1.4-cvs])
AC_PREFIX_DEFAULT(/usr/local)

AC_CONFIG_HEADERS([config.h:config.h.in:config.h.incl],,[[
	echo > config.h.incl
	echo >> config.h.incl "/* Ultrastar computed includes */"
	echo >> config.h.incl "$ac_includes_default"
]])

dnl ###########################################################################
dnl #### generate config.h  for C++   sources

CFLAGS="-W -Wall $CFLAGS"
CXXFLAGS="-W -Wall $CXXFLAGS"

# standard programs
AC_PROG_CXX
AC_PROG_INSTALL
AC_PROG_LIBTOOL
AC_PATH_PROG(HELP2MAN, help2man, AC_MSG_ERROR(Cannot find help2man))

THEMES_DIR="${datadir}/ultrastar-ng/themes/"
AC_SUBST(THEMES_DIR)

DATA_DIR="${datadir}/ultrastar-ng/"
AC_SUBST(DATA_DIR)

# Processing configure input configuration flags
	
AC_ARG_ENABLE(debug,
	AC_HELP_STRING(--enable-debug,
		Enable debugging support),
	[case "${enableval}" in
		yes) debug="yes" ;;
		no)  debug="no" ;;
		*) AC_MSG_ERROR(bad value ${enableval} for --enable-debug) ;;
 	esac],
	debug="no")
if test $debug = yes ; then CFLAGS="-g $CFLAGS" ; CXXFLAGS="-g $CXXFLAGS" ; fi

AC_ARG_WITH(audio,
	AC_HELP_STRING(--with-audio[={xine|gstreamer}],
		implementation of the audio layer (default: autodetect)),
	[audio_layer="$withval"],
	[audio_layer="autodetect"]
)
if test $audio_layer = yes ; then audio_layer="autodetect" ; fi

AC_ARG_WITH(svg,
	AC_HELP_STRING(--with-svg[={cairo|librsvg}],
		implementation of the svg rendering layer (default: librsvg)),
	[svg_layer="$withval"],
	[svg_layer="librsvg"]
)
if test $svg_layer = yes ; then svg_layer="librsvg" ; fi

AC_ARG_WITH(video,
	 AC_HELP_STRING(--with-video[={gstreamer|xine|smpeg|disable}],
	 	implementation of the video rendering layer (default: autodetect)),
	[video_layer="$withval"],
	[video_layer="autodetect"]
)
if test $video_layer = yes ; then video_layer="autodetect" ; fi

AC_ARG_WITH(graphic-driver,
        AC_HELP_STRING(--with-graphic-driver[={sdl|opengl}],
                graphic driver selection (default: sdl)),
        [graphic_driver="$withval"],
        [graphic_driver="sdl"]
)
if test $graphic_driver = yes; then graphic_driver="sdl"; fi

# Check for the standard headers
AC_HEADER_STDC
AC_HEADER_DIRENT

AC_LANG_SAVE
	AC_LANG_CPLUSPLUS
	AC_CHECK_HEADERS([algorithm],
		have_stdpp_headers=yes, 
		AC_MSG_ERROR([You need to have the libstdc++ headers installed]))
	AC_CHECK_HEADERS([boost/thread.hpp],, 
		AC_MSG_ERROR([You need to have the boost thread headers installed]))
AC_LANG_RESTORE

AC_CHECK_HEADERS([fcntl.h math.h glob.h getopt.h dirent.h sys/ioctl.h sys/types.h sys/stat.h ],
	have_std_headers=yes,
	AC_MSG_ERROR(You need to have the standard c headers installed) )

PKG_CHECK_MODULES(cairo, cairo >= 1.2 , ,
	AC_MSG_ERROR(This game cannot be built without cairo >= 1.2 ))

PKG_CHECK_MODULES(libxml, libxml-2.0 , ,
	AC_MSG_ERROR(This game cannot be built without libxml-2))

PKG_CHECK_MODULES(pangocairo, pangocairo , ,
	AC_MSG_ERROR(This game cannot be built without pango for cairo))

PKG_CHECK_MODULES(librsvg, librsvg-2.0 , [librsvg_detected="yes"] , [librsvg_detected="no"])
PKG_CHECK_MODULES(cairosvg, cairo-svg , [cairosvg_detected="yes"] , [cairosvg_detected="no"])
PKG_CHECK_MODULES(xine, libxine , [xine_detected="yes"] , [xine_detected="no"])
PKG_CHECK_MODULES(gstreamer, gstreamer-0.10 , [gst_detected="yes"] , [gst_detected="no"])

PKG_CHECK_MODULES(alsa, alsa , [record_alsa="yes"] , [record_alsa="no"])
PKG_CHECK_MODULES(portAudioV19, portaudio-2.0 , [record_pa19="yes"] , [record_pa19="no"])

if test $record_pa19 = no ; then
	AC_CHECK_LIB(portaudio, Pa_Initialize, [record_pa18="yes"] , [record_pa18="no"])
else
	record_pa18="no"
fi

AC_CHECK_PROGS(SDLCONFIG, sdl-config, AC_MSG_ERROR(Cannot find sdl-config))
AC_CHECK_LIB(SDL_image, IMG_LoadPNG_RW,,AC_MSG_ERROR(Cannot find SDL_image))
AC_CHECK_LIB(SDL_gfx, zoomSurface,,AC_MSG_ERROR(Cannot find SDL_gfx))
AC_CHECK_LIB(smpeg,SMPEG_new,[smpeg_detected="yes"],[smpeg_detected="no"])

dnl ###########################################################################
dnl #### processing things

# standard headers are installed, we include them in the config.h file

# Do things for cairo
CAIRO_FLAGS=`pkg-config --cflags cairo`
CAIRO_LIBS=`pkg-config --libs cairo`
ac_includes_default=$(cat <<USNG_EOF
$ac_includes_default
/* cairo headers */
#include <cairo.h>
USNG_EOF)
AC_SUBST(CAIRO_FLAGS)
AC_SUBST(CAIRO_LIBS)

# Do things for libxml
XML_FLAGS=`xml2-config --cflags`
XML_LIBS=`xml2-config --libs`
ac_includes_default=$(cat <<USNG_EOF
$ac_includes_default
/* libxml2 headers */
#include <libxml/parser.h>
#include <libxml/tree.h>
USNG_EOF)
AC_SUBST(XML_FLAGS)
AC_SUBST(XML_LIBS)

# Do things for libsdl
SDL_FLAGS=`$SDLCONFIG --cflags`
SDL_LIBS=`$SDLCONFIG --libs`
ac_includes_default=$(cat <<USNG_EOF
$ac_includes_default
/* libsdl headers */
#include <SDL/SDL.h>
#include <SDL/SDL_thread.h>
/* other SDL headers */
#include <SDL/SDL_image.h>
#include <SDL/SDL_rotozoom.h>    
USNG_EOF)
AC_SUBST(SDL_FLAGS)
AC_SUBST(SDL_LIBS)

# Do things for pangocairo
PANGOCAIRO_FLAGS=`pkg-config --cflags pangocairo`
PANGOCAIRO_LIBS=`pkg-config --libs pangocairo`
ac_includes_default=$(cat <<USNG_EOF
$ac_includes_default
/* pango cairo headers */
#include <pango/pangocairo.h>
USNG_EOF)
AC_SUBST(PANGOCAIRO_FLAGS)
AC_SUBST(PANGOCAIRO_LIBS)

if test $record_alsa = yes ; then
	RECORD_ALSA_FLAGS=`pkg-config --cflags alsa`
	RECORD_ALSA_LIBS=`pkg-config --libs alsa`
	AM_CONDITIONAL(RECORD_ALSA, true)
else
	RECORD_ALSA_FLAGS=""
	RECORD_ALSA_LIBS=""
	AM_CONDITIONAL(RECORD_ALSA, false)
fi
AC_SUBST(RECORD_ALSA_FLAGS)
AC_SUBST(RECORD_ALSA_LIBS)

if test $record_pa18 = yes ; then
	RECORD_PA18_FLAGS=""
	RECORD_PA18_LIBS="-lportaudio"
	AM_CONDITIONAL(RECORD_PA18, true)
else
	RECORD_PA18_FLAGS=""
	RECORD_PA18_LIBS=""
	AM_CONDITIONAL(RECORD_PA18, false)
fi
AC_SUBST(RECORD_PA18_FLAGS)
AC_SUBST(RECORD_PA18_LIBS)

if test $record_pa19 = yes ; then
	RECORD_PA19_FLAGS=`pkg-config --cflags portaudio-2.0`
	RECORD_PA19_LIBS=`pkg-config --libs portaudio-2.0`
	AM_CONDITIONAL(RECORD_PA19, true)
else
	RECORD_PA19_FLAGS=""
	RECORD_PA19_LIBS=""
	AM_CONDITIONAL(RECORD_PA19, false)
fi
AC_SUBST(RECORD_PA19_FLAGS)
AC_SUBST(RECORD_PA19_LIBS)

if test $gst_detected = yes ; then
	RECORD_GST_FLAGS=`pkg-config --cflags gstreamer-0.10`
	RECORD_GST_LIBS=`pkg-config --libs gstreamer-0.10`
	AM_CONDITIONAL(RECORD_GST, true)
else
	RECORD_GST_FLAGS=""
	RECORD_GST_LIBS=""
	AM_CONDITIONAL(RECORD_GST, false)
fi
AC_SUBST(RECORD_GST_FLAGS)
AC_SUBST(RECORD_GST_LIBS)

# Do things for video
case $video_layer in
	gstreamer*)
		if test $gst_detected = yes ; then
			video_layer="no"
		else
			video_layer="no"
		fi
		;;
	xine*)
		if test $xine_detected = yes ; then
			video_layer="no"
		else
			video_layer="no"
		fi
		;;
	smpeg*)
		if test $smpeg_detected = yes ; then
			video_layer="smpeg"
		else
			video_layer="no"
		fi
		;;
	autodetect*)
		if test $smpeg_detected = yes ; then
			video_layer="smpeg"
		else
			video_layer="no"
		fi
		;;
esac
case $video_layer in
	gstreamer*)
		VIDEO_FLAGS=`pkg-config --cflags gstreamer-0.10`
		VIDEO_LIBS=`pkg-config --libs gstreamer-0.10`
		ac_includes_default=$(cat <<-USNG_EOF
		$ac_includes_default
		/* video headers */
		#define USE_GSTREAMER_VIDEO 1
		#include <gst/gst.h>
		USNG_EOF)
		;;
	xine*)
		VIDEO_FLAGS=`xine-config --cflags`
		VIDEO_LIBS=`xine-config --libs`
		ac_includes_default=$(cat <<-USNG_EOF
		$ac_includes_default
		/* video headers */
		#define USE_LIBXINE_VIDEO 1
		#include <xine.h>
		USNG_EOF)
		;;
	smpeg*)
		VIDEO_FLAGS=""
		VIDEO_LIBS="-lsmpeg"
		ac_includes_default=$(cat <<-USNG_EOF
		$ac_includes_default
		/* video headers */
		#define USE_SMPEG 1
		#include <smpeg/smpeg.h>
		USNG_EOF)
		;;
	no*)
		;;
esac
AC_SUBST(VIDEO_FLAGS)
AC_SUBST(VIDEO_LIBS)

# Do things for audio
case $audio_layer in
	xine*)
		if test $xine_detected = yes ; then
			audio_layer="xine"
		else
			audio_layer="no"
		fi
		;;	
	gstreamer*)
		if test $gst_detected = yes ; then
			audio_layer="gstreamer"
		else
			audio_layer="no"
		fi
		;;
	autodetect*)
		if test $xine_detected = yes ; then
			audio_layer="xine"
		else if test $gst_detected = yes ; then
			audio_layer="gstreamer"
		else
			audio_layer="no"
		fi ; fi
		;;
esac

case $audio_layer in
	xine*)
		AUDIO_FLAGS=`xine-config --cflags`
		AUDIO_LIBS=`xine-config --libs`
		ac_includes_default=$(cat <<-USNG_EOF
		$ac_includes_default
		/* video headers */
		#define USE_LIBXINE_AUDIO 1
		#include <xine.h>
		USNG_EOF)
		;;
	gstreamer*)
		AUDIO_FLAGS=`pkg-config --cflags gstreamer-0.10`
		AUDIO_LIBS=`pkg-config --libs gstreamer-0.10`
		ac_includes_default=$(cat <<-USNG_EOF
		$ac_includes_default
		/* video headers */
		#define USE_GSTREAMER_AUDIO 1
		#include <gst/gst.h>
		USNG_EOF)
		;;
	no*)
		AC_MSG_ERROR("I'm sure you wish audio in this game please install eather xine or gstreamer")
		;;
esac

AC_SUBST(AUDIO_FLAGS)
AC_SUBST(AUDIO_LIBS)

# Do things for svg
case $svg_layer in
	librsvg*)
		if test $librsvg_detected = yes ; then
			svg_layer="librsvg"
		else
			svg_layer="no"
		fi
		;;
	cairo*)
		if test $cairosvg_detected = yes ; then
			svg_layer="cairo"
		else
			svg_layer="no"
		fi
		;;
	autodetect*)
		if test $librsvg_detected = yes ; then
			svg_layer="librsvg"
		else if test $cairosvg_detected = yes ; then
			svg_layer="cairo"
		else
			svg_layer="no"
		fi ; fi
		;;
esac

case $svg_layer in
	librsvg*)
		SVG_FLAGS=`pkg-config --cflags librsvg-2.0`
		SVG_LIBS=`pkg-config --libs librsvg-2.0`
		ac_includes_default=$(cat <<-USNG_EOF
		$ac_includes_default
		/* svg headers */
		#define USE_LIBRSVG 1
		#include <librsvg/rsvg.h>
		#include <librsvg/rsvg-cairo.h>
		USNG_EOF)
		;;
	cairo*)
		SVG_FLAGS=`pkg-config --cflags libsvg-cairo`
		SVG_LIBS=`pkg-config --libs libsvg-cairo`
		ac_includes_default=$(cat <<-USNG_EOF
		$ac_includes_default
		/* svg headers */
		#define USE_LIBSVG_CAIRO 1
		#include <svg.h>
		#include <svg-cairo.h>
		USNG_EOF)
		;;
	no*)
		AC_MSG_ERROR("Ultrstar-ng doesn't support non svg rendering please install eather cairo-svg or librsvg")
		;;
esac

AC_SUBST(SVG_FLAGS)
AC_SUBST(SVG_LIBS)

case $graphic_driver in
	sdl*)
		GL_LIBS=""
		ac_includes_default=$(cat <<-USNG_EOF
		$ac_includes_default
		/* graphic driver */
		#define USE_SDL 1
		USNG_EOF)
		;;
        opengl*)
		GL_LIBS="-lGL -lGLU"
		ac_includes_default=$(cat <<-USNG_EOF
		$ac_includes_default
		/* graphic driver */
		#define USE_OPENGL 1 
		#include <SDL/SDL_opengl.h>
		USNG_EOF)
		;;
esac

AC_SUBST(GL_LIBS)

dnl ###########################################################################
dnl #### generation of the outputs

AC_OUTPUT(
	Makefile
	audio/Makefile
	data/Makefile
	docs/Makefile
	src/Makefile
	themes/Makefile
)

echo "                                                                    "
echo "Ultrastar-ng is now configured to your system with the following    "
echo "user-defined options.                                               "
echo "                                                                    "
echo "Option           | Flag                     | Chosen implementation "
echo "--------------------------------------------------------------------"
echo "debug            | --{enable,disable}-debug | $debug                "
echo "audio            | --with-audio             | $audio_layer          "
echo "video            | --with-video             | $video_layer          "
echo "svg              | --with-svg               | $svg_layer            "
echo "graphic driver   | --with-graphic-driver    | $graphic_driver       "
echo "                                                                    "
